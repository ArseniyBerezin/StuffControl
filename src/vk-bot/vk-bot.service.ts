import { Injectable, OnModuleInit } from '@nestjs/common'
import { ConfigService } from '@nestjs/config'
import { GoogleDriveService } from 'src/google-drive/google-drive.service'
import { UserService } from 'src/user/user.service'
import { VK } from 'vk-io'

@Injectable()
export class VkBotService implements OnModuleInit {
	private vk: VK

	constructor(
		private configService: ConfigService,
		private userService: UserService,
		private googleDriveService: GoogleDriveService
	) {
		this.vk = new VK({
			token: this.configService.get<string>('VK_TOKEN')
		})
	}

	async onModuleInit() {
		await this.startLongPolling()
	}

	async startLongPolling() {
		this.vk.updates.on('message_new', async (context, next) => {
			const message = context.text

			if (message.startsWith('/reg')) {
				const args = message.split(' ').slice(1)

				if (args.length !== 5) {
					await context.send(
						'‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reg <vkID> <–Ω–∏–∫> <—ç–ª.–ø–æ—á—Ç–∞> <–¥–æ–ª–∂–Ω–æ—Å—Ç—å> <—Ñ—Ä–∞–∫—Ü–∏—è>'
					)
					return
				}

				const [vkId, nickname, email, role, fraction] = args

				await this.userService.register(+vkId, nickname, email, fraction, role)
				await this.googleDriveService.giveAccessByFraction(fraction, email)

				await context.send(
					`‚úÖ –£—Å–ø–µ—Ö! –í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${nickname}, –∫–∞–∫ ${role + ' ' + fraction}`
				)
			}

			if (message.startsWith('/deleteuser')) {
				const args = message.split(' ').slice(1)

				if (args.length !== 1) {
					await context.send(
						'‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /deleteuser <–Ω–∏–∫>'
					)
					return
				}

				const [nickname] = args
				const user = await this.userService.findUserByNick(nickname)
				if(user === undefined || user === null) return await context.send(`‚ùå –ù–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ!`)
				await this.googleDriveService.revokeAccessByFraction(user.fraction, user.email)
				await this.userService.delete(nickname)

				await context.send(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: –ù–∏–∫ - ${nickname}. –î–æ—Å—Ç—É–ø —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${nickname} –∫ —Ç–∞–±–ª–∏—Ü–∞–º –∏ —Ñ–æ—Ä–º–∞–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω!`)
			}

			if (message.startsWith('/rankup')) {
				const args = message.split(' ').slice(1)

				if (args.length !== 3) {
					return await context.send(
						'‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rankup <–Ω–∏–∫> <–¥–æ–ª–∂–Ω–æ—Å—Ç—å> <—Ñ—Ä–∞–∫—Ü–∏—è>'
					)
				}

				const [nickname, role, fraction] = args
				await this.userService.editUser(nickname, fraction, role)

				await context.send(
					`‚úÖ –£—Å–ø–µ—Ö! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${nickname} –∏–∑–º–µ–Ω–∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–∞ ${role + ' ' + fraction}`
				)
			}

			if (message.startsWith('/find')) {
				const args = message.split(' ').slice(1)

				if (args.length !== 1) {
					return await context.send(
						'‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /find <—Ñ—Ä–∞–∫—Ü–∏—è>'
					)
				}
				const [fraction] = args
				const finded = await this.userService.findUserByFractions(fraction)
				if (finded.length <= 0 && finded != undefined)
					return await context.send(
						`‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É ${fraction} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–µ–¥—è—â–∏—Ö!`
					)

				const userList = finded
					.map(
						user =>
							`‚ö° –ù–∏–∫: ${user.nick}, \nüìß Email: ${user.email}, \nüè¢ –§—Ä–∞–∫—Ü–∏—è: ${user.fraction}, \n‚òÄ –†–æ–ª—å: ${user.role}`
					)
					.join('\n\n')
				await context.send(`üïµÔ∏è‚Äç‚ôÇÔ∏èüïµÔ∏è‚Äç‚ôÄÔ∏è –°–ø–∏—Å–æ–∫ —Å–ª–µ–¥—è—â–∏—Ö –∑–∞ ${fraction}:\n\n${userList}`)
			}

			await next()
		})

		this.vk.updates.start().catch()
	}
}
